name: Pylint and Pytest

on: [push,pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10","3.11"]
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: cache poetry install
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-1.7.1-0

    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        # virtualenvs-path: ~/my-custom-path
          
    - name: Configure poetry
      run: |
        python -m poetry config virtualenvs.in-project true
    
    - name: Cache the virtualenv
      uses: actions/cache@v2
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
  
    # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
    # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
    # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
    - name: cache deps
      id: cache-deps
      uses: actions/cache@v2
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    # Install dependencies. `--no-root` means "install all dependencies but not the project
    # itself", which is what you want to avoid caching _your_ code. The `if` statement
    # ensures this only runs on a cache miss.
    - run: poetry install --no-interaction --no-root
      if: steps.cache-deps.outputs.cache-hit != 'true'

    # Now install _your_ project. This isn't necessary for many types of projects -- particularly
    # things like Django apps don't need this. But it's a good idea since it fully-exercises the
    # pyproject.toml and makes that if you add things like console-scripts at some point that
    # they'll be installed and working.
    - run: poetry install --no-interaction

    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
        
    # And finally run tests. I'm using pytest and all my pytest config is in my `pyproject.toml`
    # so this line is super-simple. But it could be as complex as you need.
    - run: poetry run pytest
  
